{"version":3,"sources":["meteor://ðŸ’»app/packages/arunoda_streams/packages/arunoda_streams.js"],"names":[],"mappingsfile":"/packages/arunoda_streams.js","sourcesContent":["(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/arunoda:streams/lib/ev.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nfunction _EV() {                                                                                                     // 1\n  var self = this;                                                                                                   // 2\n  var handlers = {};                                                                                                 // 3\n                                                                                                                     // 4\n  self.emit = function emit(event) {                                                                                 // 5\n    var args = Array.prototype.slice.call(arguments, 1);                                                             // 6\n                                                                                                                     // 7\n    if(handlers[event]) {                                                                                            // 8\n      for(var lc=0; lc<handlers[event].length; lc++) {                                                               // 9\n        var handler = handlers[event][lc];                                                                           // 10\n        handler.apply(this, args);                                                                                   // 11\n      }                                                                                                              // 12\n    }                                                                                                                // 13\n  };                                                                                                                 // 14\n                                                                                                                     // 15\n  self.on = function on(event, callback) {                                                                           // 16\n    if(!handlers[event]) {                                                                                           // 17\n      handlers[event] = [];                                                                                          // 18\n    }                                                                                                                // 19\n    handlers[event].push(callback);                                                                                  // 20\n  };                                                                                                                 // 21\n                                                                                                                     // 22\n  self.once = function once(event, callback) {                                                                       // 23\n    self.on(event, function onetimeCallback() {                                                                      // 24\n      callback.apply(this, arguments);                                                                               // 25\n      self.removeListener(event, onetimeCallback);                                                                   // 26\n    });                                                                                                              // 27\n  };                                                                                                                 // 28\n                                                                                                                     // 29\n  self.removeListener = function removeListener(event, callback) {                                                   // 30\n    if(handlers[event]) {                                                                                            // 31\n      var index = handlers[event].indexOf(callback);                                                                 // 32\n      handlers[event].splice(index, 1);                                                                              // 33\n    }                                                                                                                // 34\n  };                                                                                                                 // 35\n                                                                                                                     // 36\n  self.removeAllListeners = function removeAllListeners(event) {                                                     // 37\n    handlers[event] = undefined;                                                                                     // 38\n  };                                                                                                                 // 39\n}                                                                                                                    // 40\n                                                                                                                     // 41\nEV = _EV;                                                                                                            // 42\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/arunoda:streams/lib/server.js                                                                            //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar EventEmitter = Npm.require('events').EventEmitter;                                                               // 1\nvar util = Npm.require('util');                                                                                      // 2\nvar Fibers = Npm.require('fibers');                                                                                  // 3\n                                                                                                                     // 4\nMeteor.Stream = function Stream(name) {                                                                              // 5\n  EV.call(this);                                                                                                     // 6\n                                                                                                                     // 7\n  var self = this;                                                                                                   // 8\n  var streamName = 'stream-' + name;                                                                                 // 9\n  var allowFunction;                                                                                                 // 10\n  var allowResultCache = true;                                                                                       // 11\n  var allowResults = {};                                                                                             // 12\n  var filters = [];                                                                                                  // 13\n                                                                                                                     // 14\n  self.name = name;                                                                                                  // 15\n                                                                                                                     // 16\n  var events = new EventEmitter();                                                                                   // 17\n  events.setMaxListeners(0);                                                                                         // 18\n                                                                                                                     // 19\n  var disconnectEvents = new EV();                                                                                   // 20\n                                                                                                                     // 21\n  self._emit = self.emit;                                                                                            // 22\n  self.emit = function emit() {                                                                                      // 23\n    self.emitToSubscriptions(arguments, null, null);                                                                 // 24\n  };                                                                                                                 // 25\n                                                                                                                     // 26\n  var defaultResult =  (typeof(Package) == 'object' && Package.insecure)? true: Meteor.Collection.insecure === true; // 27\n  self.permissions = new Meteor.Stream.Permission(defaultResult, true);                                              // 28\n                                                                                                                     // 29\n  self.addFilter = function addFilter(callback) {                                                                    // 30\n    filters.push(callback);                                                                                          // 31\n  };                                                                                                                 // 32\n                                                                                                                     // 33\n  self.emitToSubscriptions = function emitToSubscriptions(args, subscriptionId, userId) {                            // 34\n    events.emit('item', {args: args, userId: userId, subscriptionId: subscriptionId});                               // 35\n  };                                                                                                                 // 36\n                                                                                                                     // 37\n  Meteor.publish(streamName, function() {                                                                            // 38\n    check(arguments, Match.Any);                                                                                     // 39\n    var subscriptionId = Random.id();                                                                                // 40\n    var publication = this;                                                                                          // 41\n                                                                                                                     // 42\n    //send subscription id as the first document                                                                     // 43\n    publication.added(streamName, subscriptionId, {type: 'subscriptionId'});                                         // 44\n    publication.ready();                                                                                             // 45\n    events.on('item', onItem);                                                                                       // 46\n                                                                                                                     // 47\n    function onItem(item) {                                                                                          // 48\n      Fibers(function() {                                                                                            // 49\n        var id = Random.id();                                                                                        // 50\n        if(self.permissions.checkPermission('read', subscriptionId, publication.userId, item.args)) {                // 51\n          //do not send again this to the sender                                                                     // 52\n          if(subscriptionId != item.subscriptionId) {                                                                // 53\n            publication.added(streamName, id, item);                                                                 // 54\n            publication.removed(streamName, id);                                                                     // 55\n          }                                                                                                          // 56\n        }                                                                                                            // 57\n      }).run();                                                                                                      // 58\n    }                                                                                                                // 59\n                                                                                                                     // 60\n    publication.onStop(function() {                                                                                  // 61\n      //trigger related onDisconnect handlers if exists                                                              // 62\n      Fibers(function() {                                                                                            // 63\n        disconnectEvents.emit(subscriptionId);                                                                       // 64\n        disconnectEvents.removeAllListeners(subscriptionId);                                                         // 65\n      }).run();                                                                                                      // 66\n      events.removeListener('item', onItem);                                                                         // 67\n    });                                                                                                              // 68\n  });                                                                                                                // 69\n                                                                                                                     // 70\n  var methods = {};                                                                                                  // 71\n  methods[streamName] = function(subscriptionId, args) {                                                             // 72\n    check(arguments, Match.Any);                                                                                     // 73\n    //in order to send this to the server callback                                                                   // 74\n    var userId = this.userId;                                                                                        // 75\n    Fibers(function() {                                                                                              // 76\n      var methodContext = {};                                                                                        // 77\n      methodContext.userId = userId;                                                                                 // 78\n      methodContext.subscriptionId = subscriptionId;                                                                 // 79\n                                                                                                                     // 80\n      //in order to send this to the serve callback                                                                  // 81\n      methodContext.allowed = self.permissions.checkPermission('write', subscriptionId, methodContext.userId, args); // 82\n      if(methodContext.allowed) {                                                                                    // 83\n        //apply filters                                                                                              // 84\n        args = applyFilters(args, methodContext);                                                                    // 85\n        self.emitToSubscriptions(args, subscriptionId, methodContext.userId);                                        // 86\n        //send to firehose if exists                                                                                 // 87\n        if(self.firehose) {                                                                                          // 88\n          self.firehose(args, subscriptionId, methodContext.userId);                                                 // 89\n        }                                                                                                            // 90\n      }                                                                                                              // 91\n      //need to send this to server always                                                                           // 92\n      self._emit.apply(methodContext, args);                                                                         // 93\n                                                                                                                     // 94\n      //register onDisconnect handlers if provided                                                                   // 95\n      if(typeof(methodContext.onDisconnect) == 'function') {                                                         // 96\n        disconnectEvents.on(subscriptionId, methodContext.onDisconnect)                                              // 97\n      }                                                                                                              // 98\n                                                                                                                     // 99\n    }).run();                                                                                                        // 100\n  };                                                                                                                 // 101\n  Meteor.methods(methods);                                                                                           // 102\n                                                                                                                     // 103\n  function applyFilters(args, context) {                                                                             // 104\n    var eventName = args.shift();                                                                                    // 105\n    filters.forEach(function(filter) {                                                                               // 106\n      args = filter.call(context, eventName, args);                                                                  // 107\n    });                                                                                                              // 108\n    args.unshift(eventName);                                                                                         // 109\n    return args;                                                                                                     // 110\n  }                                                                                                                  // 111\n};                                                                                                                   // 112\n                                                                                                                     // 113\nutil.inherits(Meteor.Stream, EV);                                                                                    // 114\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/arunoda:streams/lib/stream_permission.js                                                                 //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nMeteor.Stream.Permission = function (acceptAll, cacheAll) {                                                          // 1\n  var options = {                                                                                                    // 2\n    \"read\": {                                                                                                        // 3\n      results: {}                                                                                                    // 4\n    },                                                                                                               // 5\n    \"write\": {                                                                                                       // 6\n      results: {}                                                                                                    // 7\n    }                                                                                                                // 8\n  };                                                                                                                 // 9\n                                                                                                                     // 10\n  this.read = function(func, cache) {                                                                                // 11\n    options['read']['func'] = func;                                                                                  // 12\n    options['read']['doCache'] = (cache === undefined)? cacheAll: cache;                                             // 13\n  };                                                                                                                 // 14\n                                                                                                                     // 15\n  this.write = function(func, cache) {                                                                               // 16\n    options['write']['func'] = func;                                                                                 // 17\n    options['write']['doCache'] = (cache === undefined)? cacheAll: cache;                                            // 18\n  };                                                                                                                 // 19\n                                                                                                                     // 20\n  this.checkPermission = function(type, subscriptionId, userId, args) {                                              // 21\n    var eventName = args[0];                                                                                         // 22\n    var namespace = subscriptionId + '-' + eventName;                                                                // 23\n    var result = options[type].results[namespace];                                                                   // 24\n                                                                                                                     // 25\n    if(result === undefined) {                                                                                       // 26\n      var func = options[type].func;                                                                                 // 27\n      if(func) {                                                                                                     // 28\n        var context = {subscriptionId: subscriptionId, userId: userId};                                              // 29\n        result = func.apply(context, args);                                                                          // 30\n        if(options[type].doCache) {                                                                                  // 31\n          options[type].results[namespace] = result;                                                                 // 32\n        }                                                                                                            // 33\n        return result;                                                                                               // 34\n      } else {                                                                                                       // 35\n        return acceptAll;                                                                                            // 36\n      }                                                                                                              // 37\n    } else {                                                                                                         // 38\n      return result;                                                                                                 // 39\n    }                                                                                                                // 40\n  };                                                                                                                 // 41\n}                                                                                                                    // 42\n                                                                                                                     // 43\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}